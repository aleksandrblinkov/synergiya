#в python в типе данных string иожно использовать как одинарные'' так и двойные"" кавычки. оба случая верны
name = 'Alex'
surname = "Blinkov"
print(name, surname)
#следующее действие производит слияние строк
name = 'Alex'
surname = "Blinkov"
fullname = name + surname
print(fullname)
#Чтобы разделить строки, достаточно в конце строки после которой нужно разделение, поставить пробел.
name = 'Alex '
surname = "Blinkov"
fullname = name + surname
print (fullname)
#С помощью операции умножения можно создавать несколько копий строки
# s * n, где s - переменная, а n - кол-во копий
#чтобы копии разделились в конце строки нужно добавить пробел
name = 'Sasha '
print(name * 5)
#Значение множителя n должно быть целым положительным числом 
#Оно может быть 0 или отрицательным числом, но в этом случае будет просто пустая строка
print(name * -3) # Получится пустая строка

#ОПЕРАТОР ПРИНАДЛЕЖНОСТИ in
#in Будет возвращать True, если подстрока входит в строку n, False, если нет
#Используется для манипуляции со строками
#in
s = 'Alex'
print(s in 'Hello, Alex') #True

#Если сменить название переменной то будет False
s = 'Tom'
print(s in 'Hello, Alex') # False
#Оператор in удобно использовать в условных конструкциях, где нужно узнать находится ли в нашей строке подстрока или нет
#Также есть условный оператор not in. У него просто обратное значение
# not in
s = "Sasha"
print(s not in "Hello, Alex")  #True

s = "Sasha"
print(s not in "Hello, Sasha") #False


#В строке могут присутствовать управляющие последовательности которые интерпретируются особым образом 
# \n (Перевод строки)
print("Hello \n World") #После слеша пишем слитно,если нужно отступ
# \t (Табуляция - отступ от нашей строки)
print("\t Hello World")
#\""
#Чтобы отделить нашу строку от кавычек, используется слеш \
print("Hello \"World\" ")
#Либо можно ставить одинарные или двойные кавычки,без использования слеша
print("Hello 'World' ")


#СРАВНЕНИЕ СТРОК
#Принимается во внимание символы и их регистр
#Цифровой символ всегда меньше, чем алфавитный регистр.
#А верхний алфавитный регистр всегда меньше, чем нижний 
str1 = "1a"
str2 = "aa"
str3 = "Aa"
print(str1 > str2)  #False
print(str2 > str3)  #True
#Если первые символы одинаковые, то во внимание берутся вторый и т.д.
## Зависимость от регистра не всегда желательна. Если идет сравнение строк то нужно приаодить все строки к одному регистру
#С этим помогает функция:
#lower() или upper()
#lower(приводит всю строку к нижнему регистру)
#upper(приводит всю строку к верхнему регистру)
text = 'Hello'
print(text. lower())
print(text. upper())

#capitalize()
#Приводит первую букву в строке в верхний регистр, а остальные в нижний.
text = 'hello'
print(text. capitalize())

#title()
#Преобразует первые буквы всех слов в строке в верхний регистр
text = 'hello, world'
print(text. title())


#ИНДЕКСАЦИЯ
# имя_строки [индекс] #len() (индексация начинается с нуля)
#Длина последнего символа в python это длина строки минус 1
#Длинна отсчитывается с 1, т.е. индекс последнего символа +1
s = "Hello, World!"
print(len(s))
print(s[5])
print(s[6])
print(s[12])
#Если обратиться к несуществующему символу или индексу то Python выведет ошибку
#print(s[14])
#Индексы могут быть в отрицательной форме, но счет пойдет с последнего знака и с единицы
s = 'Hello, World!'
print(len(s))
print(s[-5])
print(s[-6])
print(s[-13])
print(s[-1])
print([-len(s)-1])
#Python допускает извлечение подстроки из строки - срез строки
#s | s[m : n]
s = 'Python'
print(s[2 : 4])
# s[ :3] = s[0 : 3]
print (s[ :3])
#s[3: ] = s[3 : len(s)]
print(s[3 : ])
#s[ : ] целая строка
print(s[ : ])
#в следующем случае будет пустая
print(s[4 : 2])
#в отрицательном случае все тоже самое только справа на лево и отсчет с единицы. если значение m больше n то на выходе будет все слева на право
print(s[-4 : -2])
#Последний символ не считается (не входит в счет)

#Так же есть еще способ среза строки
# s[m : n : k]  k - шаг (через сколько шагов нужно вытащить индекс)
s = "Python"
print(s[0 : len(s) : 2])
#Если шаг будет равен 1 то выдаст целую строчку
print(s[0 : len(s) : 1])
#Python дает возможность только перезаписывать строку. Изменять ее нельзя
#Перезапись делается с помощью среза
s = 'Python'
s = s[ : 3] + 'y' + s[4 : ]
print(s)
#Иной способ
# replace (функция реплейс)
s = s. replace ('h', 'y')
print(s)